{"ast":null,"code":"var _jsxFileName = \"D:\\\\Facultate\\\\Repo\\\\EmployeeTrack\\\\src\\\\components\\\\EmployeeList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, Typography, Grid, Button, Dialog, DialogTitle, DialogContent, DialogActions, TextField, Checkbox } from '@mui/material';\nimport ApiService from '../services/ApiService';\nimport EmailForm from './EmailForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmployeeList = () => {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [deleteResult, setDeleteResult] = useState(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isInfoDialogOpen, setIsInfoDialogOpen] = useState(false);\n  const [isEmailFormOpen, setIsEmailFormOpen] = useState(false);\n  const [newEmployeeData, setNewEmployeeData] = useState({\n    name: '',\n    managerID: '',\n    email: '',\n    departmentID: ''\n  });\n  const [selectedPersons, setSelectedPersons] = useState([]);\n  useEffect(() => {\n    ApiService.getEmployees().then(response => setEmployees(response.data)).catch(error => console.error('Error fetching employees:', error));\n  }, []);\n  const handleEmployeeButtonClick = employee => {\n    setSelectedEmployee(employee);\n    setIsDialogOpen(true);\n  };\n  const handleDialogClose = () => {\n    setIsDialogOpen(false);\n    setDeleteResult(null);\n    setSelectedEmployee(null);\n  };\n  const handleDeleteEmployee = () => {\n    ApiService.deleteEmployee(selectedEmployee.id).then(() => {\n      setEmployees(employees.filter(emp => emp.id !== selectedEmployee.id));\n      setDeleteResult('Employee deleted successfully.');\n      handleDialogClose();\n    }).catch(error => {\n      console.error('Error deleting employee:', error);\n      setDeleteResult('Error deleting employee.');\n    });\n  };\n  const handleAddDialogClick = () => {\n    setIsAddDialogOpen(true);\n  };\n  const handleAddDialogClose = () => {\n    setIsAddDialogOpen(false);\n    setNewEmployeeData({\n      name: '',\n      managerID: '',\n      email: '',\n      departmentID: ''\n    });\n  };\n  const handleAddEmployee = () => {\n    ApiService.addEmployee(newEmployeeData).then(response => {\n      setEmployees([...employees, response.data]);\n      setIsAddDialogOpen(false);\n      setNewEmployeeData({\n        name: '',\n        managerID: '',\n        email: '',\n        departmentID: ''\n      });\n    }).catch(error => console.error('Error adding employee:', error));\n  };\n  const handleShowInfoClick = async employee => {\n    try {\n      const response = await ApiService.getEmployee(employee.id);\n      setSelectedEmployee(employee);\n      setIsInfoDialogOpen(true);\n      // You can use response.data to display additional employee details\n    } catch (error) {\n      console.error('Error fetching employee details:', error);\n    }\n  };\n  const handleInfoDialogClose = () => {\n    setIsInfoDialogOpen(false);\n    setSelectedEmployee(null);\n  };\n  const handleSelectPerson = employee => {\n    setSelectedPersons(prevSelected => {\n      if (prevSelected.includes(employee)) {\n        return prevSelected.filter(selectedPerson => selectedPerson !== employee);\n      } else {\n        return [...prevSelected, employee];\n      }\n    });\n  };\n  const handleSendEmailClick = () => {\n    if (selectedPersons.length > 0) {\n      // Deschide formularul EmailForm cu angajații selectați\n      // Pasează prop-ul onClose pentru a gestiona închiderea formularului\n      setIsEmailFormOpen(true);\n    } else {\n      console.warn('No persons selected for email');\n    }\n  };\n  const handleSendEmail = (subject, message) => {\n    // Implementează aici logica pentru a trimite e-mailurile\n    // Folosește subiectul și mesajul așa cum este necesar\n    console.log('Subject:', subject);\n    console.log('Message:', message);\n    // Aici poți adăuga logica pentru a trimite efectiv e-mailul\n    // Poți utiliza o librărie pentru gestionarea trimiterii de e-mailuri sau o altă metodă corespunzătoare\n  };\n  const resetSelectedPersons = () => {\n    setSelectedPersons([]);\n  };\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 2,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        style: {\n          backgroundColor: '#d76c6c',\n          marginRight: '10px',\n          borderRadius: '10px'\n        },\n        onClick: handleAddDialogClick,\n        children: \"Add Employee\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        style: {\n          backgroundColor: '#d76c6c',\n          borderRadius: '10px'\n        },\n        onClick: handleSendEmailClick,\n        children: \"Send Email to Selected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), isEmailFormOpen && /*#__PURE__*/_jsxDEV(EmailForm, {\n      selectedPersons: selectedPersons,\n      onClose: () => {\n        setIsEmailFormOpen(false);\n        resetSelectedPersons();\n      },\n      onSendEmail: handleSendEmail,\n      resetSelectedPersons: resetSelectedPersons\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }, this), employees.map(employee => /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      md: 4,\n      lg: 3,\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: employee.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            style: {\n              borderColor: '#265364',\n              color: '#265364',\n              marginBottom: '10px'\n            },\n            onClick: () => handleShowInfoClick(employee),\n            children: \"Show All Info\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            style: {\n              borderColor: '#b00c0c',\n              color: '#b00c0c',\n              marginBottom: '10px'\n            },\n            onClick: () => handleEmployeeButtonClick(employee),\n            children: \"Delete Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n            checked: selectedPersons.includes(employee),\n            onChange: () => handleSelectPerson(employee)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 21\n      }, this)\n    }, employee.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: isDialogOpen,\n      onClose: handleDialogClose,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Delete Employee\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          children: \"Are you sure you want to delete the employee?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: selectedEmployee === null || selectedEmployee === void 0 ? void 0 : selectedEmployee.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            color: '#100101'\n          },\n          onClick: handleDialogClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            color: '#b00c0c'\n          },\n          onClick: handleDeleteEmployee,\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: isAddDialogOpen,\n      onClose: handleAddDialogClose,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Add Employee\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Department ID\",\n          fullWidth: true,\n          value: newEmployeeData.departmentID,\n          onChange: e => setNewEmployeeData({\n            ...newEmployeeData,\n            departmentID: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Name\",\n          fullWidth: true,\n          value: newEmployeeData.name,\n          onChange: e => setNewEmployeeData({\n            ...newEmployeeData,\n            name: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Manager ID\",\n          fullWidth: true,\n          value: newEmployeeData.managerID,\n          onChange: e => setNewEmployeeData({\n            ...newEmployeeData,\n            managerID: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Email\",\n          fullWidth: true,\n          value: newEmployeeData.email,\n          onChange: e => setNewEmployeeData({\n            ...newEmployeeData,\n            email: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            color: '#100101'\n          },\n          onClick: handleAddDialogClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            color: '#b00c0c'\n          },\n          onClick: handleAddEmployee,\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: isInfoDialogOpen,\n      onClose: handleInfoDialogClose,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: [(selectedEmployee === null || selectedEmployee === void 0 ? void 0 : selectedEmployee.name) || '', \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          children: [\"ID: \", selectedEmployee === null || selectedEmployee === void 0 ? void 0 : selectedEmployee.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: [\"Manager ID: \", selectedEmployee === null || selectedEmployee === void 0 ? void 0 : selectedEmployee.managerID]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: [\"Email: \", selectedEmployee === null || selectedEmployee === void 0 ? void 0 : selectedEmployee.email]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            color: '#100101'\n          },\n          onClick: handleInfoDialogClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 9\n  }, this);\n};\n_s(EmployeeList, \"UcAaMRTVK01EkAaPcgQVQTRS1ys=\");\n_c = EmployeeList;\nexport default EmployeeList;\nvar _c;\n$RefreshReg$(_c, \"EmployeeList\");","map":{"version":3,"names":["React","useState","useEffect","Card","CardContent","Typography","Grid","Button","Dialog","DialogTitle","DialogContent","DialogActions","TextField","Checkbox","ApiService","EmailForm","jsxDEV","_jsxDEV","EmployeeList","_s","employees","setEmployees","selectedEmployee","setSelectedEmployee","deleteResult","setDeleteResult","isDialogOpen","setIsDialogOpen","isAddDialogOpen","setIsAddDialogOpen","isInfoDialogOpen","setIsInfoDialogOpen","isEmailFormOpen","setIsEmailFormOpen","newEmployeeData","setNewEmployeeData","name","managerID","email","departmentID","selectedPersons","setSelectedPersons","getEmployees","then","response","data","catch","error","console","handleEmployeeButtonClick","employee","handleDialogClose","handleDeleteEmployee","deleteEmployee","id","filter","emp","handleAddDialogClick","handleAddDialogClose","handleAddEmployee","addEmployee","handleShowInfoClick","getEmployee","handleInfoDialogClose","handleSelectPerson","prevSelected","includes","selectedPerson","handleSendEmailClick","length","warn","handleSendEmail","subject","message","log","resetSelectedPersons","container","spacing","children","item","xs","variant","style","backgroundColor","marginRight","borderRadius","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onClose","onSendEmail","map","sm","md","lg","gutterBottom","borderColor","color","marginBottom","checked","onChange","open","label","fullWidth","value","e","target","_c","$RefreshReg$"],"sources":["D:/Facultate/Repo/EmployeeTrack/src/components/EmployeeList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    Typography,\r\n    Grid,\r\n    Button,\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    TextField,\r\n    Checkbox\r\n} from '@mui/material';\r\nimport ApiService from '../services/ApiService';\r\nimport EmailForm from './EmailForm';\r\n\r\nconst EmployeeList = () => {\r\n    const [employees, setEmployees] = useState([]);\r\n    const [selectedEmployee, setSelectedEmployee] = useState(null);\r\n    const [deleteResult, setDeleteResult] = useState(null);\r\n    const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n    const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\r\n    const [isInfoDialogOpen, setIsInfoDialogOpen] = useState(false);\r\n    const [isEmailFormOpen, setIsEmailFormOpen] = useState(false);\r\n    const [newEmployeeData, setNewEmployeeData] = useState({\r\n\r\n        name: '',\r\n        managerID: '',\r\n        email: '',\r\n        departmentID: '',\r\n    });\r\n    const [selectedPersons, setSelectedPersons] = useState([]);\r\n\r\n    useEffect(() => {\r\n        ApiService.getEmployees()\r\n            .then((response) => setEmployees(response.data))\r\n            .catch((error) => console.error('Error fetching employees:', error));\r\n    }, []);\r\n\r\n    const handleEmployeeButtonClick = (employee) => {\r\n        setSelectedEmployee(employee);\r\n        setIsDialogOpen(true);\r\n    };\r\n\r\n    const handleDialogClose = () => {\r\n        setIsDialogOpen(false);\r\n        setDeleteResult(null);\r\n        setSelectedEmployee(null);\r\n    };\r\n\r\n    const handleDeleteEmployee = () => {\r\n        ApiService.deleteEmployee(selectedEmployee.id)\r\n            .then(() => {\r\n                setEmployees(employees.filter((emp) => emp.id !== selectedEmployee.id));\r\n                setDeleteResult('Employee deleted successfully.');\r\n                handleDialogClose();\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error deleting employee:', error);\r\n                setDeleteResult('Error deleting employee.');\r\n            });\r\n    };\r\n\r\n    const handleAddDialogClick = () => {\r\n        setIsAddDialogOpen(true);\r\n    };\r\n\r\n    const handleAddDialogClose = () => {\r\n        setIsAddDialogOpen(false);\r\n        setNewEmployeeData({\r\n\r\n            name: '',\r\n            managerID: '',\r\n            email: '',\r\n            departmentID: '',\r\n        });\r\n    };\r\n\r\n    const handleAddEmployee = () => {\r\n        ApiService.addEmployee(newEmployeeData)\r\n            .then((response) => {\r\n                setEmployees([...employees, response.data]);\r\n                setIsAddDialogOpen(false);\r\n                setNewEmployeeData({\r\n\r\n                    name: '',\r\n                    managerID: '',\r\n                    email: '',\r\n                    departmentID: '',\r\n                });\r\n            })\r\n            .catch((error) => console.error('Error adding employee:', error));\r\n    };\r\n\r\n    const handleShowInfoClick = async (employee) => {\r\n        try {\r\n            const response = await ApiService.getEmployee(employee.id);\r\n            setSelectedEmployee(employee);\r\n            setIsInfoDialogOpen(true);\r\n            // You can use response.data to display additional employee details\r\n        } catch (error) {\r\n            console.error('Error fetching employee details:', error);\r\n        }\r\n    };\r\n\r\n    const handleInfoDialogClose = () => {\r\n        setIsInfoDialogOpen(false);\r\n        setSelectedEmployee(null);\r\n    };\r\n\r\n    const handleSelectPerson = (employee) => {\r\n        setSelectedPersons((prevSelected) => {\r\n            if (prevSelected.includes(employee)) {\r\n                return prevSelected.filter((selectedPerson) => selectedPerson !== employee);\r\n            } else {\r\n                return [...prevSelected, employee];\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleSendEmailClick = () => {\r\n        if (selectedPersons.length > 0) {\r\n            // Deschide formularul EmailForm cu angajații selectați\r\n            // Pasează prop-ul onClose pentru a gestiona închiderea formularului\r\n            setIsEmailFormOpen(true);\r\n        } else {\r\n            console.warn('No persons selected for email');\r\n        }\r\n    };\r\n    const handleSendEmail = (subject, message) => {\r\n        // Implementează aici logica pentru a trimite e-mailurile\r\n        // Folosește subiectul și mesajul așa cum este necesar\r\n        console.log('Subject:', subject);\r\n        console.log('Message:', message);\r\n        // Aici poți adăuga logica pentru a trimite efectiv e-mailul\r\n        // Poți utiliza o librărie pentru gestionarea trimiterii de e-mailuri sau o altă metodă corespunzătoare\r\n    };\r\n\r\n    const resetSelectedPersons = () => {\r\n        setSelectedPersons([]);\r\n    };\r\n    return (\r\n        <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n                <Button variant=\"contained\" style={{ backgroundColor: '#d76c6c' , marginRight: '10px',  borderRadius: '10px'}} onClick={handleAddDialogClick}>\r\n                    Add Employee\r\n                </Button>\r\n                <Button variant=\"contained\" style={{ backgroundColor: '#d76c6c' , borderRadius: '10px' }} onClick={handleSendEmailClick}>\r\n                    Send Email to Selected\r\n                </Button>\r\n            </Grid>\r\n            {isEmailFormOpen && (\r\n                <EmailForm\r\n                    selectedPersons={selectedPersons}\r\n                    onClose={() => {\r\n                        setIsEmailFormOpen(false);\r\n                        resetSelectedPersons();\r\n                    }}\r\n                    onSendEmail={handleSendEmail}\r\n                    resetSelectedPersons={resetSelectedPersons}\r\n                />\r\n            )}\r\n\r\n\r\n            {employees.map((employee) => (\r\n                <Grid item xs={12} sm={6} md={4} lg={3} key={employee.id}>\r\n                    <Card>\r\n                        <CardContent >\r\n                            <Typography variant=\"h6\" gutterBottom>\r\n                                {employee.name}\r\n                            </Typography>\r\n                            <Button variant=\"outlined\" style={{ borderColor: '#265364',color: '#265364', marginBottom: '10px' }} onClick={() => handleShowInfoClick(employee)}>\r\n                                Show All Info\r\n                            </Button>\r\n                            <Button variant=\"outlined\"  style={{ borderColor: '#b00c0c',color: '#b00c0c', marginBottom: '10px' }} onClick={() => handleEmployeeButtonClick(employee)}>\r\n                                Delete Employee\r\n                            </Button>\r\n                            <Checkbox checked={selectedPersons.includes(employee)} onChange={() => handleSelectPerson(employee)} />\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n            ))}\r\n\r\n            <Dialog open={isDialogOpen} onClose={handleDialogClose}>\r\n                <DialogTitle>Delete Employee</DialogTitle>\r\n                <DialogContent>\r\n                    <Typography>Are you sure you want to delete the employee?</Typography>\r\n                    <Typography>{selectedEmployee?.name}</Typography>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button style={{ color: '#100101' }} onClick={handleDialogClose}>Cancel</Button>\r\n                    <Button style={{ color: '#b00c0c' }} onClick={handleDeleteEmployee}>\r\n                        Delete\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog open={isAddDialogOpen} onClose={handleAddDialogClose}>\r\n                <DialogTitle>Add Employee</DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <TextField\r\n                        label=\"Department ID\"\r\n                        fullWidth\r\n                        value={newEmployeeData.departmentID}\r\n                        onChange={(e) => setNewEmployeeData({ ...newEmployeeData, departmentID: e.target.value })}\r\n                    />\r\n                    <TextField\r\n                        label=\"Name\"\r\n                        fullWidth\r\n                        value={newEmployeeData.name}\r\n                        onChange={(e) => setNewEmployeeData({ ...newEmployeeData, name: e.target.value })}\r\n                    />\r\n                    <TextField\r\n                        label=\"Manager ID\"\r\n                        fullWidth\r\n                        value={newEmployeeData.managerID}\r\n                        onChange={(e) => setNewEmployeeData({ ...newEmployeeData, managerID: e.target.value })}\r\n                    />\r\n                    <TextField\r\n                        label=\"Email\"\r\n                        fullWidth\r\n                        value={newEmployeeData.email}\r\n                        onChange={(e) => setNewEmployeeData({ ...newEmployeeData, email: e.target.value })}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button style={{ color: '#100101' }} onClick={handleAddDialogClose}>Cancel</Button>\r\n                    <Button style={{ color: '#b00c0c' }} onClick={handleAddEmployee}>\r\n                        Add\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog open={isInfoDialogOpen} onClose={handleInfoDialogClose}>\r\n                <DialogTitle>{selectedEmployee?.name || ''} </DialogTitle>\r\n                <DialogContent>\r\n                    <Typography>ID: {selectedEmployee?.id}</Typography>\r\n                    <Typography>Manager ID: {selectedEmployee?.managerID}</Typography>\r\n                    <Typography>Email: {selectedEmployee?.email}</Typography>\r\n                    {/* Add more details about the employee here */}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button style={{ color: '#100101' }} onClick={handleInfoDialogClose}>Close</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default EmployeeList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}